<?php
// $Id$

/**
 * @file
 *
 * Enables mautic tracker
 */

/**
 * Define default path exclusion list to remove tracking from admin pages.
 */
define('MAUTIC_PAGES', "admin\nadmin/*\nbatch\nnode/add*\nnode/*/*\nuser/*/*");

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function mautic_help($path, $arg) {
  switch ($path) {
    case "admin/help#mautic":
      $output = '<h3>' . t("Mautic integration") . '</h3>';
      $output .= '<p>' . t('This Drupal module lets you add the <a href="@mautic">Mautic</a> tracking gif to your Drupal website and embed Mautic forms in Drupal content.', array('@mautic' => 'http://mautic.org')) . '</p>';
      $output .= '<h3>' . t('Features') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Mautic Tracking') . '</dt>';
      $output .= '<dd>' . t('Tracking script works right after you enable the module, insert Base URL and save the plugin. That means it will insert a Javascript tracking script from your Mautic instance. You can check HTML source code (CTRL + U) of your Drupal website to make sure the plugin works. You should be able to find the script by searching for:<br><code>"http://yourmautic.com/mtc.js"</code><br>There will be probably longer URL query string at the end of the tracking script URL. It is encoded additional data about the page (title, url, referrer, language).') . '</dd>';
      $output .= '<dt>' . t('Form embed') . '</dt>';
      $output .= '<dd>' . t("To embed a Mautic form into Drupal content, insert this code snippet:<br><code>[mauticform id=ID]</code><br>ID is the identifier of the Mautic form you want to embed. You can see the ID of the form in the URL of the form detail. For example for www.yourmautic.com/forms/view/1, ID = 1.") . '</dd>';
      $output .= '</dl>';
      $output .= '<p>' . t('Mautic-Drupal module <a href="@doc">documentation</a>, <a href="@issues">issue reporting</a>', array('@doc' => 'https://github.com/mautic/mautic-drupal/tree/7.x#readme', '@issues' => 'https://github.com/mautic/mautic-drupal/issues')) . '</p>';

      return $output;
      break;
  }
}

/**
 * Implements hook_page_alter() to insert JavaScript to the appropriate scope/region of the page.
 */
function mautic_page_alter(&$page) {
  if( _mautic_visibility_pages()) {
    $mautic_base_url = trim(variable_get('mautic_base_url', ''), " \t\n\r\0\x0B/");
    $script = '(function(w,d,t,u,n,a,m){w["MauticTrackingObject"]=n;';
    $script .= 'w[n]=w[n]||function(){(w[n].q=w[n].q||[]).push(arguments)},a=d.createElement(t),';
    $script .= 'm=d.getElementsByTagName(t)[0];a.async=1;a.src=u;m.parentNode.insertBefore(a,m)';
    $script .= '})(window,document,"script","' . $mautic_base_url . '/mtc.js","mt");';
    $script .= 'mt("send", "pageview");';
    drupal_add_js($script, array('scope' => 'header', 'type' => 'inline', 'requires_jquery' => FALSE));

    // Prefill Helper
    drupal_add_js(drupal_get_path('module', 'mautic') . '/js/mauticform-prefill.js', array('scope' => 'footer', 'requires_jquery' => FALSE));
  }
}

/**
 * Implementation of hook_filter_info()
 */
function mautic_filter_info() {
  $filters['mautic_shortcode'] = array(
    'title' => t('Mautic Shortcodes'),
    'description' => t('Sets up a custom filter that helps create mautic artifacts.'),
    'process callback' => 'mautic_filter_shortcodes_process',
    'tips callback'  => 'mautic_filter_shortcodes_tips',
    'cache' => FALSE,
  );
  return $filters;
}

function mautic_filter_shortcodes_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  $text = preg_replace_callback('/\[mauticform id=(.*)\]/', '_mautic_form_replace', $text);
  $text = preg_replace_callback('/\[mautic type="content" slot="(.*)"\](.*)\[\/mautic\]/', '_mautic_dynamic_content_replace', $text);
  $text = preg_replace_callback('/\[mauticfocusitem id=(.*)\]/', '_mautic_focus_item_replace', $text);
  return $text;
}

function mautic_filter_shortcodes_tips($filter, $format, $long) {
  return t("[mauticform id=1] - Insert a Mautic form with given ID.<br>
          [mautic type=\"content\" slot=\"slot_name\"]Default Content[/mautic] - Insert dynamic web content.<br>
          [mauticfocusitem id=1] - Insert Mautic Focus Item with given ID.");
}

function _mautic_form_replace($matches) {
  $form_id = $matches[1];
  $mautic_base_url = trim(variable_get('mautic_base_url', ''), " \t\n\r\0\x0B/");
  $args = array('@mautic_base_url' => $mautic_base_url, '@form_id' => $form_id);
  $script = format_string('<script src="@mautic_base_url/form/generate.js?id=@form_id"></script>', $args);
  return $script;
}

function _mautic_dynamic_content_replace($matches) {
  $dc_slot_name = $matches[1];
  $internal_dom = $matches[2];
  $args = array('@slot_name' => $dc_slot_name, '@dom' => $internal_dom);
  $dynamic_web_content = format_string('<div data-slot-container=""><div class="mautic-slot" data-slot-name="@slot_name">@dom</div></div>', $args);
  return $dynamic_web_content;
}

function _mautic_focus_item_replace($matches) {
  $focus_id = $matches[1];
  $mautic_base_url = variable_get('mautic_base_url', '');
  $args = array('@mautic_base_url' => $mautic_base_url, '@focus_id' => $focus_id);
  $script = format_string('<script src="@mautic_base_url/focus/@focus_id.js" charset="utf8" async="async"></script>', $args);
  return $script;
}

/**
 * Implements hook_menu().
 */
function mautic_menu() {
  $items = array();

  $items['admin/config/system/mautic'] = array(
    'title' => 'Mautic',
    'description' => 'Configuration for Current posts module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mautic_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function mautic_form() {
  $form = array();

  $form['mautic_base_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Mautic URL'),
    '#default_value' => variable_get('mautic_base_url', ''),
    '#size' => 60,
    '#description' => t("Your mautic base url, e.g. https://mydomain.com. No trailing slash required."),
    '#required' => TRUE,
  );

  $options = array(
    t('Every page except the listed pages'),
    t('The listed pages only'),
  );
  $visibility = variable_get('mautic_pages_visibility', 0);

  $form['mautic_pages_visibility'] = array(
    '#type' => 'radios',
    '#title' => t('Add tracking to specific pages'),
    '#options' => $options,
    '#default_value' => $visibility,
  );

  $pages = variable_get('mautic_pages', MAUTIC_PAGES);
  $description = t("Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", array('%blog' => 'blog', '%blog-wildcard' => 'blog/*', '%front' => '<front>'));

  $form['mautic_pages'] = array(
    '#type' => 'textarea',
    '#title' => t('Pages'),
    '#title_display' => 'invisible',
    '#default_value' => $pages,
    '#description' => $description,
    '#rows' => 10,
  );

  return system_settings_form($form);
}

/**
 * Based on visibility setting this function returns TRUE if Mautic's tracking js should
 * be added to the current page and FALSE otherwise.
 */
function _mautic_visibility_pages() {
  static $page_match;

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {

    $visibility = variable_get('mautic_pages_visibility', 0);
    $setting_pages = variable_get('mautic_pages', MAUTIC_PAGES);

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Drupal path to lowercase
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the tracking code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;
}
